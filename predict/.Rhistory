saveRDS(importances, "importance_history.RDA")
saveRDS(cluster_movement, "cluster_history.RDA")
saveRDS(scores, "scores_and_predictions.RDA")
saveRDS(team_stats, "historical_team_cluster_deltas.RDA")
saveRDS(summary, "high_level_summary.RDA")
saveRDS(production_centroids, "centroids_from_2013.RDA")
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/results")
importances <- readRDS("importance_history.RDA")
cluster_movement <- readRDS("cluster_history.RDA")
scores <- readRDS("scores_and_predictions.RDA")
team_stats <- readRDS("historical_team_cluster_deltas.RDA")
summary <- readRDS("high_level_summary.RDA")
production_centroids <- readRDS("centroids_from_2013.RDA")
df <- filter(summary, playoffs==0) %>%
dplyr::select(-playoffs, -games, -lift_over_coin_flip, -actual_wins, -predicted_wins) %>%
mutate(actual = paste0(round(actual_win_rate*100), "%"),
predicted = paste0(round(pred_win_rate*100), "%"),
rank = pred_rank,
rank_diff = pred_rank - actual_rank) %>%
arrange(-pred_win_rate) %>%
select(-actual_win_rate, -pred_win_rate, -actual_rank, -pred_rank, -accuracy) %>% arrange()
View(df)
grid.newpage()
pdf("summary_season.pdf", height=11*0.4, width=8.5)
mytheme <- gridExtra::ttheme_default(
core = list(fg_params=list(cex = 0.9)),
colhead = list(fg_params=list(cex = 0.9)),
rowhead = list(fg_params=list(cex = 0.9)))
myt1 <- gridExtra::tableGrob(df[1:15, ], rows=NULL, cols=c("Team", "Actual", "Predicted", "Rank", "Rank Diff"), theme = mytheme)
myt2 <- gridExtra::tableGrob(df[16:30, ], rows=NULL, cols=c("Team", "Actual", "Predicted", "Rank", "Rank Diff"), theme = mytheme)
myt <- grid.arrange(myt1, myt2, nrow=1)
grid.draw(myt)
dev.off()
###### Deal with the playoffs
### Summarize team performances -- have to do this twice because the data was collapsed into matchups
playoff1 <- scores %>%
filter(playoffs==1) %>%
group_by(selected_team, opposing_team) %>%
mutate(match=as.numeric(selected_team_win==pred_win)) %>%
summarise(pred_win=sum(pred_win),
prob_win_selected_team=sum(prob_win_selected_team),
win=sum(selected_team_win),
match=sum(match),
games=n()) %>%
rename(team=selected_team) %>%
ungroup()
playoff2 <- scores %>%
filter(playoffs==1) %>%
group_by(opposing_team, selected_team) %>%
mutate(match = as.numeric((selected_team_win==0)==(pred_win==0))) %>%
summarise(pred_win=sum(as.numeric(pred_win==0)),
prob_win_selected_team=sum(1-prob_win_selected_team),
win=sum(selected_team_win==0),
match=sum(match),
games=n()) %>%
rename(team=opposing_team,
opposing_team=selected_team) %>%
ungroup()
playoff_summary <- rbind.data.frame(playoff1, playoff2) %>% group_by(team, opposing_team) %>%
summarise(win_rate=sum(win),
prob_win_selected_team=sum(prob_win_selected_team),
games=sum(games),
pred_win=sum(pred_win),
match=sum(match)) %>%
mutate(prob_win_selected_team = prob_win_selected_team/games,
accuracy = match / games,
actual_wins=win_rate,
predicted_wins=pred_win) %>%
arrange(-actual_wins) %>%
select(-match, -prob_win_selected_team, -win_rate, -pred_win, -accuracy, -actual_wins) %>%
filter(team=="Golden State") %>%
ungroup()
grid.newpage()
pdf("summary_playoffs.pdf", height=1.5, width=5.5)
mytheme <- gridExtra::ttheme_default(
core = list(fg_params=list(cex = 1)),
colhead = list(fg_params=list(cex = 1)),
rowhead = list(fg_params=list(cex = 1)))
myt <- gridExtra::tableGrob(playoff_summary, rows=NULL, cols=c("Team", "Opposing Team", "Games Played", "Predicted Wins"), theme = mytheme)
grid.draw(myt)
dev.off()
devtools::document()
setwd("/users/kimlarsen/Documents/Code/r_packages/Information")
devtools::document()
devtools::check()
devtools::build_win()
devtools::release()
library(Information)
df <- readRDS("~/Code/kimadhoc/abcdtest/abtest_data.rda")
IV <- Information::create_infotables(data=df,
y="experiment_cell_name_A__Verbage_only",
parallel=TRUE)
library(Information)
df <- readRDS("~/Code/kimadhoc/abcdtest/abtest_data.rda")
df$fake_date <- as.Date("2015-09-09")
IV <- Information::create_infotables(data=df,
y="experiment_cell_name_A__Verbage_only",
parallel=TRUE)
devtools::release()
install.packages("ggplot2")
getwd()
devtools::document()
devtools::check()
library(Information)
df <- readRDS("~/Code/kimadhoc/abcdtest/abtest_data.rda")
df$fake_date <- as.Date("2015-09-09")
IV <- Information::create_infotables(data=df,
y="experiment_cell_name_A__Verbage_only",
parallel=TRUE)
IV$Summary
library(Information)
df <- readRDS("~/Code/kimadhoc/abcdtest/abtest_data.rda")
df$fake_date <- as.Date("2015-09-09")
IV <- Information::create_infotables(data=df,
y="experiment_cell_name_A__Verbage_only",
parallel=TRUE)
IV$Summary
IV$Tables$experiment_cell_name
IV$Tables$footwear_fit_width
devtools::install()
library(Information)
df <- readRDS("~/Code/kimadhoc/abcdtest/abtest_data.rda")
df$fake_date <- as.Date("2015-09-09")
IV <- Information::create_infotables(data=df,
y="experiment_cell_name_A__Verbage_only",
parallel=TRUE)
IV$Summary
devtools::install()
library(Information)
library(Information)
df <- readRDS("~/Code/kimadhoc/abcdtest/abtest_data.rda")
df$fake_date <- as.Date("2015-09-09")
IV <- Information::create_infotables(data=df,
y="experiment_cell_name_A__Verbage_only",
parallel=TRUE)
IV$Summary
devtools::document()
devtools::check()
devtools::build_win()
devtools::release()
library(xlsx)
library(dplyr)
library(ggplot2)
library(readxl)
library(data.table)
library(scales)
library(randomForestSRC)
library(doMC)
library(glmnet)
library(gridExtra)
library(grid)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
source("auc.R")
### Global settings
cutoff <- 8 # minutes per game. if a player plays less than this amount, he is excluded
nclus <- 10 # number of archetypes
ntrees <- 100 # number trees in the RF solution
window <- 91
include_winperc <- TRUE
method <- "EN"
prior <- FALSE
alpha <- 0 # for elastic net
### Read the raw data
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/data")
box_scores <- readRDS("BOX_SCORES.RDA")
game_scores <- readRDS("GAME_SCORES.RDA")
playoff_date <- max(subset(box_scores, season==2014 & playoffs==0)$DATE)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
### Get means for centroids
means <- box_scores %>%
group_by(game_id) %>%
filter(season<2014) %>%
mutate(assists=sum(assists),
offensive_rebounds=sum(offensive_rebounds),
defensive_rebounds=sum(defensive_rebounds),
turnovers=sum(turnovers),
threepointers_made=sum(threepointers_made),
steals=sum(steals),
points=sum(points),
minutes=sum(minutes),
threepoint_attempts=sum(threepoint_attempts),
fieldgoal_attempts=sum(fieldgoal_attempts),
fieldgoals_made=sum(fieldgoals_made),
freethrows_made=sum(freethrows_made),
freethrow_attempts=sum(freethrow_attempts),
blocks=sum(blocks),
share_of_minutes=sum(share_of_minutes)) %>%
mutate(fieldgoal_percent=ifelse(fieldgoal_attempts>0, fieldgoals_made/fieldgoal_attempts, 0),
freethrow_percent=ifelse(freethrow_attempts>0, freethrows_made/freethrow_attempts, 0),
efficiency=(blocks + points + offensive_rebounds + defensive_rebounds + assists + steals - (fieldgoal_attempts - fieldgoals_made) - (freethrow_attempts - freethrows_made) - turnovers)) %>%
replace(is.na(.), 0) %>%
select(-threepoint_attempts, -freethrow_attempts, -fieldgoal_attempts, -points)
View(game_scores)
library(xlsx)
library(dplyr)
library(ggplot2)
library(readxl)
library(data.table)
library(scales)
library(randomForestSRC)
library(doMC)
library(glmnet)
library(gridExtra)
library(grid)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
source("auc.R")
### Global settings
cutoff <- 8 # minutes per game. if a player plays less than this amount, he is excluded
nclus <- 10 # number of archetypes
ntrees <- 100 # number trees in the RF solution
window <- 91
include_winperc <- TRUE
method <- "EN"
prior <- FALSE
alpha <- 0 # for elastic net
### Read the raw data
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/data")
box_scores <- readRDS("BOX_SCORES.RDA")
game_scores <- readRDS("GAME_SCORES.RDA")
playoff_date <- max(subset(box_scores, season==2014 & playoffs==0)$DATE)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
### Get means for centroids
means <- box_scores %>%
group_by(game_id) %>%
filter(season<2014) %>%
mutate(assists=sum(assists),
offensive_rebounds=sum(offensive_rebounds),
defensive_rebounds=sum(defensive_rebounds),
turnovers=sum(turnovers),
threepointers_made=sum(threepointers_made),
steals=sum(steals),
points=sum(points),
minutes=sum(minutes),
threepoint_attempts=sum(threepoint_attempts),
fieldgoal_attempts=sum(fieldgoal_attempts),
fieldgoals_made=sum(fieldgoals_made),
freethrows_made=sum(freethrows_made),
freethrow_attempts=sum(freethrow_attempts),
blocks=sum(blocks),
share_of_minutes=sum(share_of_minutes)) %>%
mutate(fieldgoal_percent=ifelse(fieldgoal_attempts>0, fieldgoals_made/fieldgoal_attempts, 0),
freethrow_percent=ifelse(freethrow_attempts>0, freethrows_made/freethrow_attempts, 0),
efficiency=(blocks + points + offensive_rebounds + defensive_rebounds + assists + steals - (fieldgoal_attempts - fieldgoals_made) - (freethrow_attempts - freethrows_made) - turnovers)) %>%
replace(is.na(.), 0) %>%
select(-threepoint_attempts, -freethrow_attempts, -fieldgoal_attempts, -points) %>%
inner_join(game_scores, by="game_id") %>%
ungroup()
View(means)
library(xlsx)
library(dplyr)
library(ggplot2)
library(readxl)
library(data.table)
library(scales)
library(randomForestSRC)
library(doMC)
library(glmnet)
library(gridExtra)
library(grid)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
source("auc.R")
### Global settings
cutoff <- 8 # minutes per game. if a player plays less than this amount, he is excluded
nclus <- 10 # number of archetypes
ntrees <- 100 # number trees in the RF solution
window <- 91
include_winperc <- TRUE
method <- "EN"
prior <- FALSE
alpha <- 0 # for elastic net
### Read the raw data
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/data")
box_scores <- readRDS("BOX_SCORES.RDA")
game_scores <- readRDS("GAME_SCORES.RDA")
playoff_date <- max(subset(box_scores, season==2014 & playoffs==0)$DATE)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
### Get means for centroids
means <- box_scores %>%
group_by(game_id) %>%
filter(season<2014) %>%
summarise(assists=sum(assists),
offensive_rebounds=sum(offensive_rebounds),
defensive_rebounds=sum(defensive_rebounds),
turnovers=sum(turnovers),
threepointers_made=sum(threepointers_made),
steals=sum(steals),
points=sum(points),
minutes=sum(minutes),
threepoint_attempts=sum(threepoint_attempts),
fieldgoal_attempts=sum(fieldgoal_attempts),
fieldgoals_made=sum(fieldgoals_made),
freethrows_made=sum(freethrows_made),
freethrow_attempts=sum(freethrow_attempts),
blocks=sum(blocks),
share_of_minutes=sum(share_of_minutes)) %>%
mutate(fieldgoal_percent=ifelse(fieldgoal_attempts>0, fieldgoals_made/fieldgoal_attempts, 0),
freethrow_percent=ifelse(freethrow_attempts>0, freethrows_made/freethrow_attempts, 0),
efficiency=(blocks + points + offensive_rebounds + defensive_rebounds + assists + steals - (fieldgoal_attempts - fieldgoals_made) - (freethrow_attempts - freethrows_made) - turnovers)) %>%
replace(is.na(.), 0) %>%
select(-threepoint_attempts, -freethrow_attempts, -fieldgoal_attempts, -points) %>%
inner_join(game_scores, by="game_id") %>%
ungroup()
View(box_scores)
glm(selected_team_win ~ assists + steals, data=means)
glm(selected_team_win ~ assists + steals + points, data=means)
glm(selected_team_win ~ assists + steals + field_goal_percent, data=means)
glm(selected_team_win ~ assists + steals + fieldgoal_percent, data=means)
library(xlsx)
library(dplyr)
library(ggplot2)
library(readxl)
library(data.table)
library(scales)
library(randomForestSRC)
library(doMC)
library(glmnet)
library(gridExtra)
library(grid)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
source("auc.R")
### Global settings
cutoff <- 8 # minutes per game. if a player plays less than this amount, he is excluded
nclus <- 10 # number of archetypes
ntrees <- 100 # number trees in the RF solution
window <- 91
include_winperc <- TRUE
method <- "EN"
prior <- FALSE
alpha <- 0 # for elastic net
### Read the raw data
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/data")
box_scores <- readRDS("BOX_SCORES.RDA")
game_scores <- readRDS("GAME_SCORES.RDA")
playoff_date <- max(subset(box_scores, season==2014 & playoffs==0)$DATE)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
### Get means for centroids
means <- box_scores %>%
group_by(game_id) %>%
filter(season<2014) %>%
summarise(assists=sum(assists),
offensive_rebounds=sum(offensive_rebounds),
defensive_rebounds=sum(defensive_rebounds),
turnovers=sum(turnovers),
threepointers_made=sum(threepointers_made),
steals=sum(steals),
points=sum(points),
minutes=sum(minutes),
threepoint_attempts=sum(threepoint_attempts),
fieldgoal_attempts=sum(fieldgoal_attempts),
fieldgoals_made=sum(fieldgoals_made),
freethrows_made=sum(freethrows_made),
freethrow_attempts=sum(freethrow_attempts),
blocks=sum(blocks),
share_of_minutes=sum(share_of_minutes)) %>%
mutate(fieldgoal_percent=ifelse(fieldgoal_attempts>0, fieldgoals_made/fieldgoal_attempts, 0),
freethrow_percent=ifelse(freethrow_attempts>0, freethrows_made/freethrow_attempts, 0),
assists_to_turnovers=assists/turnovers,
efficiency=(blocks + points + offensive_rebounds + defensive_rebounds + assists + steals - (fieldgoal_attempts - fieldgoals_made) - (freethrow_attempts - freethrows_made) - turnovers)) %>%
replace(is.na(.), 0) %>%
select(-threepoint_attempts, -freethrow_attempts, -fieldgoal_attempts, -points) %>%
inner_join(game_scores, by="game_id") %>%
ungroup()
glm(selected_team_win ~ assists_to_turnovers + steals + fieldgoal_percent, data=means)
glm(selected_team_win ~ assists_to_turnovers + steals + fieldgoal_percent, data=means, family = binomial())
glm(selected_team_win ~ assists_to_turnovers + steals + fieldgoal_percent + points, data=means, family = binomial())
library(xlsx)
library(dplyr)
library(ggplot2)
library(readxl)
library(data.table)
library(scales)
library(randomForestSRC)
library(doMC)
library(glmnet)
library(gridExtra)
library(grid)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
source("auc.R")
### Global settings
cutoff <- 8 # minutes per game. if a player plays less than this amount, he is excluded
nclus <- 10 # number of archetypes
ntrees <- 100 # number trees in the RF solution
window <- 91
include_winperc <- TRUE
method <- "EN"
prior <- FALSE
alpha <- 0 # for elastic net
### Read the raw data
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/data")
box_scores <- readRDS("BOX_SCORES.RDA")
game_scores <- readRDS("GAME_SCORES.RDA")
playoff_date <- max(subset(box_scores, season==2014 & playoffs==0)$DATE)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
### Get means for centroids
means <- box_scores %>%
group_by(game_id) %>%
filter(season<2014) %>%
summarise(assists=sum(assists),
offensive_rebounds=sum(offensive_rebounds),
defensive_rebounds=sum(defensive_rebounds),
turnovers=sum(turnovers),
threepointers_made=sum(threepointers_made),
steals=sum(steals),
points=sum(points),
minutes=sum(minutes),
threepoint_attempts=sum(threepoint_attempts),
fieldgoal_attempts=sum(fieldgoal_attempts),
fieldgoals_made=sum(fieldgoals_made),
freethrows_made=sum(freethrows_made),
freethrow_attempts=sum(freethrow_attempts),
blocks=sum(blocks),
share_of_minutes=sum(share_of_minutes)) %>%
mutate(fieldgoal_percent=ifelse(fieldgoal_attempts>0, fieldgoals_made/fieldgoal_attempts, 0),
freethrow_percent=ifelse(freethrow_attempts>0, freethrows_made/freethrow_attempts, 0),
assists_to_turnovers=assists/turnovers,
efficiency=(blocks + points + offensive_rebounds + defensive_rebounds + assists + steals - (fieldgoal_attempts - fieldgoals_made) - (freethrow_attempts - freethrows_made) - turnovers)) %>%
replace(is.na(.), 0) %>%
select(-threepoint_attempts, -freethrow_attempts, -fieldgoal_attempts) %>%
inner_join(game_scores, by="game_id") %>%
ungroup()
glm(selected_team_win ~ assists_to_turnovers + steals + fieldgoal_percent + points, data=means, family = binomial())
glm(selected_team_win ~ assists_to_turnovers + steals + fieldgoal_percent + efficiency, data=means, family = binomial())
glm(selected_team_win ~ efficiency, data=means, family = binomial())
box_scores <- readRDS("BOX_SCORES.RDA")
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/data")
box_scores <- readRDS("BOX_SCORES.RDA")
View(box_scores)
library(xlsx)
library(dplyr)
library(ggplot2)
library(readxl)
library(data.table)
library(scales)
library(randomForestSRC)
library(doMC)
library(glmnet)
library(gridExtra)
library(grid)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
source("auc.R")
### Global settings
cutoff <- 8 # minutes per game. if a player plays less than this amount, he is excluded
nclus <- 10 # number of archetypes
ntrees <- 100 # number trees in the RF solution
window <- 91
include_winperc <- TRUE
method <- "EN"
prior <- FALSE
alpha <- 0 # for elastic net
### Read the raw data
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/data")
box_scores <- readRDS("BOX_SCORES.RDA")
game_scores <- readRDS("GAME_SCORES.RDA")
playoff_date <- max(subset(box_scores, season==2014 & playoffs==0)$DATE)
setwd("/Users/kimlarsen/Code/analytics/analysis/nba/predict")
### Get means for centroids
means <- box_scores %>%
group_by(game_id) %>%
filter(season<2014 & OWN_TEAM==selected_team) %>%
summarise(assists=sum(assists),
offensive_rebounds=sum(offensive_rebounds),
defensive_rebounds=sum(defensive_rebounds),
turnovers=sum(turnovers),
threepointers_made=sum(threepointers_made),
steals=sum(steals),
points=sum(points),
minutes=sum(minutes),
threepoint_attempts=sum(threepoint_attempts),
fieldgoal_attempts=sum(fieldgoal_attempts),
fieldgoals_made=sum(fieldgoals_made),
freethrows_made=sum(freethrows_made),
freethrow_attempts=sum(freethrow_attempts),
blocks=sum(blocks),
share_of_minutes=sum(share_of_minutes)) %>%
mutate(fieldgoal_percent=ifelse(fieldgoal_attempts>0, fieldgoals_made/fieldgoal_attempts, 0),
freethrow_percent=ifelse(freethrow_attempts>0, freethrows_made/freethrow_attempts, 0),
assists_to_turnovers=assists/turnovers,
efficiency=(blocks + points + offensive_rebounds + defensive_rebounds + assists + steals - (fieldgoal_attempts - fieldgoals_made) - (freethrow_attempts - freethrows_made) - turnovers)) %>%
replace(is.na(.), 0) %>%
select(-threepoint_attempts, -freethrow_attempts, -fieldgoal_attempts) %>%
inner_join(game_scores, by="game_id") %>%
ungroup()
glm(selected_team_win ~ assists_to_turnovers + steals + fieldgoal_percent + efficiency, data=means, family = binomial())
glm(selected_team_win ~ efficiency, data=means, family = binomial())
summary(glm(selected_team_win ~ assists_to_turnovers + steals + fieldgoal_percent + efficiency, data=means, family = binomial()))
summary(glm(selected_team_win ~ assists_to_turnovers + steals + fieldgoal_percent, data=means, family = binomial()))
summary(glm(selected_team_win ~ assists + turnovers + steals + fieldgoal_percent, data=means, family = binomial()))
summary(glm(selected_team_win ~ assists + turnovers + steals + fieldgoal_percent + threepointers_made, data=means, family = binomial()))
summary(glm(selected_team_win ~ assists + turnovers + steals + fieldgoal_percent + threepointers_made + freethrow_percent, data=means, family = binomial()))
summary(glm(selected_team_win ~ blocks + assists + turnovers + steals + fieldgoal_percent + threepointers_made + freethrow_percent, data=means, family = binomial()))
summary(glm(selected_team_win ~ offensive_rebounds + blocks + assists + turnovers + steals + fieldgoal_percent + threepointers_made + freethrow_percent, data=means, family = binomial()))
summary(glm(selected_team_win ~ offensive_rebounds + defensive_rebounds + blocks + assists + turnovers + steals + fieldgoal_percent + threepointers_made + freethrow_percent, data=means, family = binomial()))
summary(glm(selected_team_win ~ offensive_rebounds + defensive_rebounds + blocks + assists_to_turnovers + steals + fieldgoal_percent + threepointers_made + freethrow_percent, data=means, family = binomial()))
model <- glm(selected_team_win ~ offensive_rebounds + defensive_rebounds + blocks + assists_to_turnovers + steals + fieldgoal_percent + threepointers_made + freethrow_percent, data=means, family = binomial())
summary(model)
model <- glm(selected_team_win ~ offensive_rebounds + defensive_rebounds + blocks + assists_to_turnovers + steals + fieldgoal_percent + threepointers_made + freethrow_percent, data=means, family = binomial())
paste0("C: ", AUC(means$selected_team_win, model$fitted.values)[1])
model <- glm(selected_team_win ~ offensive_rebounds + defensive_rebounds + blocks + assists_to_turnovers + steals + threepointers_made + freethrow_percent, data=means, family = binomial())
summary(model)
paste0("C: ", AUC(means$selected_team_win, model$fitted.values)[1])
model <- glm(selected_team_win ~ fieldgoal_percent, data=means, family = binomial())
summary(model)
paste0("C: ", AUC(means$selected_team_win, model$fitted.values)[1])
model <- glm(selected_team_win ~ offensive_rebounds + defensive_rebounds + blocks + assists_to_turnovers + steals + fieldgoal_percent + threepointers_made + freethrow_percent, data=means, family = binomial())
#model <- glm(selected_team_win ~ fieldgoal_percent, data=means, family = binomial())
summary(model)
paste0("C: ", AUC(means$selected_team_win, model$fitted.values)[1])
########## Read the remaining data (churn, demand, etc.)
library(dhouser)
as_of <- gsub('-', '', Sys.Date() - lubridate::days(2))
churn <- dhouser::sf_reader(namespace='prod', resource='retention_metrics', partitions=c(as_of=as_of))
write.csv(churn, "/Users/kimlarsen/Google Drive/Retention/raw_data.csv")
